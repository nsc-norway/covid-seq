params.containerdir = "$baseDir/container-images/"
params.use_docker = false
// Select container release for custom containers.
// Use the same as the pipeline version, e.g. "v8", or "main" for newest.
params.containerrelease = "main"
params.test = false

process {
    if (params.use_docker) {
        container = "nfcore/viralrecon:1.1.0"

        withName:NSCTRIM {
            container = "ghcr.io/nsc-norway/nsctrim:1.5.3"
        }
        withName:"IVAR_VARIANTS|IVAR_CONSENSUS" {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/ivar:1.3_nsc"
        }
        withName:"VARSCAN2_CONSENSUS" {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/bcftools:1.11"
        }
        withName:PANGOLIN {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/pangolin_nsc:2021-06-15"
        }
        withName:NEXTCLADE {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/nextclade_nsc:1.2.0"
        }
        withName:"NOISE_EXTRACTOR|FRAMESHIFT_FINDER" {
            containerOptions = '-v $PWD:/home/docker/Data'
            container = "garcianacho/csak:V2"
        }
        withName:"CHECK_VARIANTS|GENERATE_REPORT|NEXTCLADE_FOR_FHI" {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/nsc_python:1.0"
        }
        withName:QC_PLOTS {
            container = "ghcr.io/nsc-norway/covid-seq-containers/$params.containerrelease/nsc_r:1.0"
        }
    }
    else {
        container = "$params.containerdir/nfcore_viralrecon_1.1.0.sif"

        withName:NSCTRIM {
            container = "$params.containerdir/nsctrim-1.5.3.sif"
        }
        withName:"BWA_INDEX|BWA_ALIGN" {
            container = "$params.containerdir/bwa_0_7_17.sif"
        }
        withName:"IVAR_VARIANTS|IVAR_CONSENSUS" {
            container = "$params.containerdir/ivar_1.3_nsc.sif"
        }
        withName:"VARSCAN2_CONSENSUS" {
            container = "$params.containerdir/bcftools_1_11.sif"
        }
        withName:PANGOLIN {
            container = "$params.containerdir/pangolin.sif"
        }
        withName:NEXTCLADE {
            container = "$params.containerdir/nextclade.sif"
        }
        withName:"NOISE_EXTRACTOR|FRAMESHIFT_FINDER" {
            containerOptions = '-B $PWD:/home/docker/Data'
            container = "$params.containerdir/garcianacho_csak-V2.sif"
        }
        withName:"CHECK_VARIANTS|GENERATE_REPORT|NEXTCLADE_FOR_FHI" {
            container = "$params.containerdir/checkvariants-python.sif"
        }
        withName:QC_PLOTS {
            container = "$params.containerdir/r_arvind.sif"
        }
    }
    
}

singularity {
    enabled = !params.use_docker
    autoMounts = true
    runOptions = "-B ./.singularity-tmp:/tmp:rw"
}

docker {
    enabled = params.use_docker
    runOptions = '-u $(id -u):$(id -g)'
}

process {
    if (params.use_docker) {
        // Usually want to use local with docker, not slurm
        executor = "local"
    }
    else {
        executor = "slurm"
    }
    
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
    maxRetries = 999
    beforeScript = "mkdir ./.singularity-tmp"
    afterScript = "rm -rf ./.singularity-tmp"

    time = '6h'

    withLabel:xlarge {
        cpus = 95
        memory = '200 GB'
    }
    withLabel:large {
        cpus = 32
        memory = '16 GB'
    }
    withLabel:medium {
        cpus = 6
        memory = '8 GB'
    }
    withLabel:small {
        cpus = 2
        memory = '8 GB'
    }
}

executor {
    queueSize = 400
    pollInterval = '10 sec'
}

params.reportdir = "$PWD/90_reports/"

report {
    enabled = true
    file = "$params.reportdir/nextflow_report.html"
}

timeline {
    enabled = true
    file = "$params.reportdir/nextflow_timeline.html"
}

dag {
    enabled = true
    file = "$params.reportdir/nextflow_flowchart.html"
}
